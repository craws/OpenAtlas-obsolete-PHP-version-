INFO
====

Watch out for database role in SQLs and change "openatlas_medcon" if needed.

2.3.1 to 2.3.2 Upgrade
======================

To delete oprhaned dates execute:

DELETE FROM model.entity WHERE entity.id IN (
    SELECT e.id FROM model.entity e
    LEFT JOIN model.link l1 on e.id = l1.domain_id
    LEFT JOIN model.link l2 on e.id = l2.range_id
    LEFT JOIN model.link_property lp1 on e.id = lp1.domain_id
    LEFT JOIN model.link_property lp2 on e.id = lp2.range_id
    WHERE
        e.class_id = (SELECT id FROM model.class WHERE code = 'E61') AND
        (l1.domain_id IS NULL OR l1.range_id IN (SELECT id FROM model.entity WHERE name IN ('Exact date value', 'To date value', 'From date value'))) AND
        l2.range_id IS NULL AND
        lp1.domain_id IS NULL AND
        lp2.range_id IS NULL
);

To prevent further orphaned dates add this function and trigger:

CREATE OR REPLACE FUNCTION model.delete_dates() RETURNS trigger AS $$
    BEGIN
        DELETE FROM model.entity WHERE id = OLD.range_id AND class_id = (SELECT id FROM model.class WHERE code = 'E61');
        RETURN OLD;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_delete_link_property
AFTER DELETE ON model.link_property
     FOR EACH ROW EXECUTE PROCEDURE model.delete_dates();
ALTER FUNCTION model.delete_dates() OWNER TO openatlas_master;


2.2.0 to 2.3.0 Upgrade
======================

Mail config is now handled in backend and saved in database instead in application.ini
Before upgrading make sure to take note of mail settings in application.ini and password.ini

1) Merge and add update database

BEGIN;

ALTER TABLE web.settings DROP COLUMN "group";
INSERT INTO web.settings (name, value) VALUES
    ('mail_transport_username', ''),
    ('mail_transport_password', ''),
    ('mail_transport_ssl', ''),
    ('mail_transport_type', ''),
    ('mail_transport_auth', ''),
    ('mail_transport_port', ''),
    ('mail_transport_host', ''),
    ('mail_from_email', ''),
    ('mail_from_name', ''),
    ('mail_recipients_login', ''),
    ('mail_recipients_feedback', '')
;
UPDATE web.settings SET name = 'default_language' WHERE name LIKE 'language';
DELETE FROM web.settings WHERE name LIKE 'notify_login';

ALTER TABLE web.user ADD COLUMN unsubscribe_code text;
ALTER TABLE ONLY web.user ADD CONSTRAINT unsubscribe_code_key UNIQUE (unsubscribe_code);

COMMIT;


2) Update mail configuration with browser as admin in admin->settings->mail

3) Test new mail config

4) Delete Mail related configuration in application.ini and password.ini





2.1.0 to 2.2.0 Upgrade
======================

BEGIN;

ALTER TABLE gis.linestring RENAME text TO type;
ALTER TABLE gis.point RENAME text TO type;
ALTER TABLE gis.polygon RENAME text TO type;
INSERT INTO gis.point (entity_id, type, geom, name) SELECT entity_id, 'centerpoint', geom,
    (SELECT name FROM model.entity e JOIN model.link l ON e.id = l.domain_id WHERE l.range_id = entity_id AND l.property_id = (SELECT id from model.property WHERE code LIKE 'P53'))
FROM gis.centerpoint;
DROP TABLE IF EXISTS gis.centerpoint;
DROP FUNCTION IF EXISTS gis.geometry_creation();
COMMIT;

Favicons: add SVG to apache.conf RewriteRule like:

RewriteRule !\.(js|ico|gif|jpg|png|css|svg)$ /index.php

and if you want to change the default OpenAtlas ones:

- use http://realfavicongenerator.net/ to generate files and copy files to public
- change line endings in browserconfig.xml from windows to unix


2.0.0 to 2.1.0 Upgrade
======================

BEGIN;

UPDATE web.settings SET value = 6 WHERE name = 'log_level';
TRUNCATE log.detail, log.log;
DELETE FROM web.user_log WHERE table_name IN ('link', 'LinkProperty');
DELETE FROM web.user_log WHERE action LIKE ('gis insert');
DELETE FROM web.user_log WHERE table_id NOT IN (SELECT id FROM model.entity);
DELETE FROM web.user_log WHERE table_id IN (SELECT e.id FROM model.entity e JOIN model.class c ON e.class_id = c.id WHERE c.code = 'E61');

COMMIT;



1.6.0 to 2.0.0 Upgrade
======================

BEGIN;

ALTER SCHEMA crm RENAME TO model;

CREATE TABLE web.form (
    id integer NOT NULL,
    name text NOT NULL,
    extendable integer DEFAULT 0 NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    modified timestamp without time zone

);
ALTER TABLE web.form OWNER TO openatlas_medcon;
CREATE SEQUENCE web.form_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE web.form_id_seq OWNER TO openatlas_medcon;
ALTER SEQUENCE web.form_id_seq OWNED BY web.form.id;

CREATE TABLE web.hierarchy (
    id integer NOT NULL,
    name text NOT NULL,
    multiple integer DEFAULT 0 NOT NULL,
    system integer DEFAULT 0 NOT NULL,
    extendable integer DEFAULT 0 NOT NULL,
    directional integer DEFAULT 0 NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    modified timestamp without time zone
);
ALTER TABLE web.hierarchy OWNER TO openatlas_medcon;
COMMENT ON COLUMN web.hierarchy.id IS 'same as model.entity.id';
COMMENT ON COLUMN web.hierarchy.name IS 'same as model.entity.name, to ensure unique root type names';

CREATE SEQUENCE web.hierarchy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE web.hierarchy_id_seq OWNER TO openatlas_medcon;
ALTER SEQUENCE web.hierarchy_id_seq OWNED BY web.hierarchy.id;

CREATE TABLE web.hierarchy_form (
    id integer NOT NULL,
    hierarchy_id integer NOT NULL,
    form_id integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    modified timestamp without time zone
);
ALTER TABLE web.hierarchy_form OWNER TO openatlas_medcon;

CREATE SEQUENCE web.hierarchy_form_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE web.hierarchy_form_id_seq OWNER TO openatlas_medcon;
ALTER SEQUENCE web.hierarchy_form_id_seq OWNED BY web.hierarchy_form.id;

ALTER TABLE ONLY web.hierarchy ALTER COLUMN id SET DEFAULT nextval('web."hierarchy_id_seq"'::regclass);
ALTER TABLE ONLY web.form ALTER COLUMN id SET DEFAULT nextval('web."form_id_seq"'::regclass);
ALTER TABLE ONLY web.hierarchy_form ALTER COLUMN id SET DEFAULT nextval('web."hierarchy_form_id_seq"'::regclass);
ALTER TABLE ONLY web.form ADD CONSTRAINT form_name_key UNIQUE (name);
ALTER TABLE ONLY web.form ADD CONSTRAINT form_pkey PRIMARY KEY (id);
ALTER TABLE ONLY web.hierarchy ADD CONSTRAINT hierarchy_pkey PRIMARY KEY (id);
ALTER TABLE ONLY web.hierarchy_form ADD CONSTRAINT hierarchy_form_pkey PRIMARY KEY (id);
CREATE TRIGGER update_modified BEFORE UPDATE ON web.hierarchy FOR EACH ROW EXECUTE PROCEDURE model.update_modified();
CREATE TRIGGER update_modified BEFORE UPDATE ON web.form FOR EACH ROW EXECUTE PROCEDURE model.update_modified();
CREATE TRIGGER update_modified BEFORE UPDATE ON web.hierarchy_form FOR EACH ROW EXECUTE PROCEDURE model.update_modified();
ALTER TABLE ONLY web.hierarchy ADD CONSTRAINT hierarchy_id_fkey FOREIGN KEY (id) REFERENCES model.entity(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ONLY web.hierarchy_form ADD CONSTRAINT hierarchy_form_form_id_fkey FOREIGN KEY (form_id) REFERENCES web.form(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ONLY web.hierarchy_form ADD CONSTRAINT hierarchy_form_hierarchy_id_fkey FOREIGN KEY (hierarchy_id) REFERENCES web.hierarchy(id) ON UPDATE CASCADE ON DELETE CASCADE;

UPDATE model.link SET property_id = (SELECT id FROM model.property WHERE code = 'P127')
WHERE range_id = (SELECT id FROM model.entity WHERE name = 'Date value type') AND
property_id = (SELECT id FROM model.property WHERE code = 'P86');

INSERT INTO web.hierarchy (id, name, multiple, system, extendable, directional) VALUES
((SELECT id FROM model.entity WHERE name='Source'), 'Source', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Event'), 'Event', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Actor Actor Relation'), 'Actor Actor Relation', 0, 1, 1, 1),
((SELECT id FROM model.entity WHERE name='Actor Function'), 'Actor Function', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Involvement'), 'Involvement', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Gender'), 'Gender', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Site'), 'Site', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Information Carrier'), 'Information Carrier', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Bibliography'), 'Bibliography', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Edition'), 'Edition', 0, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Date value type'), 'Date value type', 0, 1, 0, 0),
((SELECT id FROM model.entity WHERE name='Linguistic object classification'), 'Linguistic object classification', 0, 1, 0, 0),
((SELECT id FROM model.entity WHERE name='Administrative Unit'), 'Administrative Unit', 1, 1, 1, 0),
((SELECT id FROM model.entity WHERE name='Historical Place'), 'Historical Place', 1, 1, 1, 0);

INSERT INTO web.form (name, extendable) VALUES
('Source', 1),
('Event', 1),
('Person', 1),
('Group', 1),
('Legal Body', 1),
('Place', 1),
('Bibliography', 1),
('Edition', 1),
('Information Carrier', 1),
('Actor Actor Relation', 0),
('Involvement', 0),
('Member', 0)
;

INSERT INTO web.hierarchy_form (hierarchy_id, form_id) VALUES
((SELECT id FROM web.hierarchy WHERE name LIKE 'Gender'),(SELECT id FROM web.form WHERE name LIKE 'Person')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Source'),(SELECT id FROM web.form WHERE name LIKE 'Source')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Event'),(SELECT id FROM web.form WHERE name LIKE 'Event')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Site'),(SELECT id FROM web.form WHERE name LIKE 'Place')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Administrative Unit'),(SELECT id FROM web.form WHERE name LIKE 'Place')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Historical Place'),(SELECT id FROM web.form WHERE name LIKE 'Place')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Bibliography'),(SELECT id FROM web.form WHERE name LIKE 'Bibliography')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Edition'),(SELECT id FROM web.form WHERE name LIKE 'Edition')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Information Carrier'),(SELECT id FROM web.form WHERE name LIKE 'Information Carrier')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Actor Actor Relation'),(SELECT id FROM web.form WHERE name LIKE 'Actor Actor Relation')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Involvement'),(SELECT id FROM web.form WHERE name LIKE 'Involvement')),
((SELECT id FROM web.hierarchy WHERE name LIKE 'Actor Function'),(SELECT id FROM web.form WHERE name LIKE 'Member'))
;

UPDATE model.entity SET description =
'Categories for the relationship between two actors. This may be a mutual relationship (e.g. actor A is friend of actor B and vice versa), or a directional relationship (e.g. actor A is the child of actor B, while actor B is the parent of actor A).'
WHERE name LIKE 'Actor Actor Relation';
UPDATE model.entity SET description =
'Definitions of an actor''s function within a group or legal body. An actor can for example be member of a legal body and this membership is defined by a certain function during a certain period of time. E.g. actor "Charlemagne" is member of the legal body "Frankish Reign" from 768 to 814 in the function of "King" and he is member of the legal body "Roman Empire" from 800 to 814 in the function "Emperor".'
WHERE name LIKE 'Actor Function';
UPDATE model.entity SET description =
'Hierarchy of administrative units like "Austria", "Germany", "Italy" and their respective subunits like "Lower Austria", "Styria" and their subunits etc.'
WHERE name LIKE 'Administrative Unit';
UPDATE model.entity SET description =
'Categories for bibliographical entries as used for example in BibTeX, e.g. Book, Inbook, Article etc.'
WHERE name LIKE 'Bibliography';
UPDATE model.entity SET description =
'Categories for the classification of written sources'' editions like charter editions, chronicle edition etc.'
WHERE name LIKE 'Edition';
UPDATE model.entity SET description =
'Categories for the type of events like Change of property, Conflict, Movement, Attendance etc.'
WHERE name LIKE 'Event';
UPDATE model.entity SET description =
'Categories for gender like male, female.'
WHERE name LIKE 'Gender';
UPDATE model.entity SET description =
'Hierarchy of historical places respectively historical administrative units like: Duchy of Bavaria, Lombard Kingdom etc.'
WHERE name LIKE 'Historical Place';
UPDATE model.entity SET description =
'Categories for information carriers. A medieval charter for example may be an information carrier that has a specific content. A later copy of that charter that may be stored in another place/archive will also contain the same content. Therefore we provide different types of information carriers like: Original document, Copy of document etc.'
WHERE name LIKE 'Information Carrier';
UPDATE model.entity SET description =
'Categories to define the involvement of an actor within an event. E.g. "Napoleon" participated in the event "Invasion of Russia" as "Commander" or "Michelangelo" performed the event "painting of the Sistine chapel" as "Artist".'
WHERE name LIKE 'Involvement';
UPDATE model.entity SET description =
'Types for non-moveable entities (i.e. places) with a certain extent and/or location like Settlement, Burial site, Ritual site, Fortification etc.'
WHERE name LIKE 'Site';
UPDATE model.entity SET description =
'Types for historical sources like charter, chronicle, letter etc.'
WHERE name LIKE 'Source';

COMMIT;

1.4.0 to 1.5.0 Upgrade
======================
SET search_path = web;
CREATE TABLE user_bookmarks (
    id integer NOT NULL,
    user_id integer NOT NULL,
    entity_id integer NOT NULL,
    created timestamp without time zone DEFAULT now() NOT NULL,
    modified timestamp without time zone
);
ALTER TABLE user_bookmarks OWNER TO openatlas_medcon;
CREATE SEQUENCE user_bookmarks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;
ALTER TABLE user_bookmarks_id_seq OWNER TO openatlas_medcon;
ALTER SEQUENCE user_bookmarks_id_seq OWNED BY user_bookmarks.id;
ALTER TABLE ONLY user_bookmarks ALTER COLUMN id SET DEFAULT nextval('user_bookmarks_id_seq'::regclass);
ALTER TABLE ONLY user_bookmarks ADD CONSTRAINT user_bookmarks_pkey PRIMARY KEY (id);
ALTER TABLE ONLY user_bookmarks ADD CONSTRAINT user_bookmarks_user_id_entity_id_key UNIQUE (user_id, entity_id);
CREATE TRIGGER update_modified BEFORE UPDATE ON user_bookmarks FOR EACH ROW EXECUTE PROCEDURE crm.update_modified();
ALTER TABLE ONLY user_bookmarks ADD CONSTRAINT user_bookmarks_entity_id_fkey FOREIGN KEY (entity_id) REFERENCES crm.entity(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE ONLY user_bookmarks ADD CONSTRAINT user_bookmarks_user_id_fkey FOREIGN KEY (user_id) REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE;


1.3.0 to 1.4.0 Upgrade
======================
ALTER TABLE web.user DROP COLUMN phone;
INSERT INTO web.settings ("group", name, value) VALUES ('general', 'default_table_rows', '20');
UPDATE crm.entity SET name = 'Bibliography' WHERE name = 'Bibliographic Item';
DELETE FROM crm.entity WHERE name IN('Evidence', 'History', 'Written Source', 'Historiography', 'Archaeology', 'Excavation', 'Strayfind', 'Spolia', 'Ruins', 'Archaeological Prospection', 'Aerial Photography', 'Geoprospection', 'Survey');


1.2.0 to 1.3.0 Upgrade
======================
Remove obsolete gis point types (and links):
DELETE FROM crm.entity WHERE name IN ('Localisation Quality', 'Exact position', 'Near to a known position', 'Within a known area');


1.1.0 to 1.2.0 Upgrade
======================

Many changes in config files (/application/configs/*).
Better take new ones and change settings as needed.


1.0.1 to 1.1.0 Upgrade
======================

BEGIN;

INSERT INTO web.group (name) VALUES ('readonly'), ('manager');

INSERT INTO crm.entity (class_id, name) VALUES ((SELECT id FROM crm.class WHERE code='E55'), 'Source Transliteration');
INSERT INTO crm.link (property_id, range_id, domain_id) VALUES
((SELECT id FROM crm.property WHERE code='P127'), (SELECT id FROM crm.entity WHERE name='Linguistic object classification'), (SELECT id FROM crm.entity WHERE name='Source Transliteration'));

INSERT INTO crm.entity (class_id, name) VALUES
((SELECT id FROM crm.class WHERE code='E55'), 'Information Carrier'),
((SELECT id FROM crm.class WHERE code='E55'), 'Original Document'),
((SELECT id FROM crm.class WHERE code='E55'), 'Copy of Document');

INSERT INTO crm.link (property_id, range_id, domain_id) VALUES
((SELECT id FROM crm.property WHERE code='P127'), (SELECT id FROM crm.entity WHERE name='Information Carrier'), (SELECT id FROM crm.entity WHERE name='Original Document')),
((SELECT id FROM crm.property WHERE code='P127'), (SELECT id FROM crm.entity WHERE name='Information Carrier'), (SELECT id FROM crm.entity WHERE name='Copy of Document'));

INSERT INTO web.content (id) VALUES (5);

INSERT INTO web.i18n (field, text, item_id, language_id) VALUES
('title', 'FAQ', 5, 2),
('text', '<p>FAQ</p>', 5, 2),
('title', 'FAQ', 5, 1),
('text', '<p>FAQ</p>', 5, 1);

DELETE FROM web.content WHERE id IN (2,4);

COMMIT;

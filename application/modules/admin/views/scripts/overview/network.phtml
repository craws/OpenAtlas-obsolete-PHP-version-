<? $this->breadcrumb = [$this->link('overview'), $this->ucstring('network')]; ?>
<? $namespace = new Zend_Session_Namespace('Default'); ?>
<? $network = $namespace->network; ?><link rel="stylesheet" href="/css/d3.css" />
<script src="/js/d3/d3-3.5.17.min.js"></script>
<svg style="float:left;"></svg>
<form style="float:left;" method="post">
    <div style="float:left;">
        <? foreach ($network['classes'] as $code => $params): ?>
            <? $checked = ($params['active']) ? 'checked="checked"' : ''; ?>
            <div class="tableRow">
                <div><input id="<?= $code ?>" name="<?= $code ?>" type="checkbox" <?= $checked ?> /></div>
                <div class="tableCell"><?= $code ?></div>
                <div class="tableCell">
                    <input
                        id="<?= $code ?>_color"
                        name="<?= $code ?>_color"
                        type="text"
                        value="<?= $params['color'] ?>"
                        style="width:6em;" />
                </div>
                <div class="tableCell">
                    <div style="height:0.6em;width:1em;background-color:<?= $params['color'] ?>"></div>
                </div>
            </div>
        <? endforeach ?>
    </div>
    <div style="float:left;">
        <? foreach ($network['properties'] as $code => $params): ?>
            <? $checked = ($params['active']) ? 'checked="checked"' : ''; ?>
            <div class="tableRow">
                <div><input id="<?= $code ?>" name="<?= $code ?>" type="checkbox" <?= $checked ?> /></div>
                <div class="tableCell"><?= $code ?></div>
            </div>
        <? endforeach ?>
    </div><br />
    <div>
        <div class="tableRow">
            <? $checked = ($network['options']['show orphans']) ? 'checked="checked"' : ''; ?>
            <div><input id="show-orphans" name="show-orphans" type="checkbox" <?= $checked ?> /></div>
            <div class="tableCell"><?= $this->ucstring('show orphans') ?></div>
        </div>
        <div class="tableRow">
            <div><?= $this->ucstring('width') ?></div>
            <div class="tableCell">
                <input id="width" name="width" type="text" value="<?= $network['options']['width'] ?>" style="width:6em;" />
            </div>
        </div>
        <div class="tableRow">
            <div><?= $this->ucstring('height') ?></div>
            <div class="tableCell">
                <input id="height" name="height" type="text" value="<?= $network['options']['height'] ?>" style="width:6em;" />
            </div>
        </div>
        <div class="tableRow">
            <div><?= $this->ucstring('charge') ?></div>
            <div class="tableCell">
                <input id="charge" name="charge" type="text" value="<?= $network['options']['charge'] ?>" style="width:6em;" />
            </div>
        </div>
        <div class="tableRow">
            <div><?= $this->ucstring('linkDistance') ?></div>
            <div class="tableCell">
                <input id="linkDistance" name="linkDistance" type="text" value="<?= $network['options']['linkDistance'] ?>" style="width:6em;" />
            </div>
        </div>
    </div>
    <button type="submit" style="margin:1em;"><?= $this->ucstring('apply') ?></button>
</form>
<script>
    function dragstarted(d) {
        d3.event.sourceEvent.stopPropagation();
        d3.select(this).classed("dragging", true);
    }
    function dragged(d) {
        d3.select(this).attr("cx", d.x = d3.event.x).attr("cy", d.y = d3.event.y);
    }
    function dragended(d) {
        d3.select(this).classed("dragging", false);
    }
    var drag, force, graph, height, l, links, n, nodes, svg, width, _i, _j, _len, _len2, _ref, _ref2;
    width = <?= $namespace->network['options']['width'] ?>;
    height = <?= $namespace->network['options']['height'] ?>;
    var svg = d3.select('svg')
        .attr('width', width)
        .attr('height', height)
        .call(d3.behavior.zoom().on("zoom", function () {
            svg.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")")
        })).append("g")
    nodes = svg.selectAll('.node');
    links = svg.selectAll('.link');
    force = d3.layout.force()
        .size([width, height])
        .charge(<?= $namespace->network['options']['charge'] ?>)
        .linkDistance(<?= $namespace->network['options']['linkDistance'] ?>)
        .on('tick', (function () {
            nodes.attr('transform', function (d) {
                return "translate(" + d.x + "," + d.y + ")";
            });
            return links.attr('x1', function (d) {
                return d.source.x;
            }).attr('y1', function (d) {
                return d.source.y;
            }).attr('x2', function (d) {
                return d.target.x;
            }).attr('y2', function (d) {
                return d.target.y;
            });
        }));

    var drag = force.drag()
        .origin(function (d) {return d;})
        .on("dragstart", dragstarted)
        .on("drag", dragged)
        .on("dragend", dragended);

    <?= $this->networkData ?>

    _ref = graph.links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        _ref2 = graph.nodes;
        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
            n = _ref2[_j];
            if (l.source === n.id) {
                l.source = n;
                continue;
            }
            if (l.target === n.id) {
                l.target = n;
                continue;
            }
        }
    }
    links = links.data(graph.links).enter().append('line').attr('class', 'link');
    nodes = nodes.data(graph.nodes).enter().append('g').attr('class', 'node').call(drag);
    nodes.append('circle')
        .attr('r', 12).
        style("fill", function (d) {
            return d.color;
        });
    nodes.append("text")
        .attr("x", 0)
        .attr("y", 20)
        .attr("dy", ".35em")
        .text(function (d) {
            return d.name;
        });
    force.nodes(graph.nodes).links(graph.links).start();
</script>
